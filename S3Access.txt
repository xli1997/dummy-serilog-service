using System;
using System.IO;
using System.Threading.Tasks;
using Amazon;
using Amazon.S3;
using Amazon.S3.Model;
using Amazon.Runtime;
using Amazon.S3.Transfer;

class Program
{
    static async Task Main(string[] args)
    {
        // Define the S3 service point, access keys, and other configurations
        string endpoint = "https://textA"; // S3-compatible endpoint URL
        string accessKey = "textB"; // Your Access Key
        string secretKey = "textC"; // Your Secret Key
        string bucketName = "your-bucket-name"; // Name of the bucket you want to use
        string filePath = "path/to/your/file.txt"; // Path to the file you want to upload
        
        // Initialize AWS credentials and configuration
        var credentials = new BasicAWSCredentials(accessKey, secretKey);
        
        var config = new AmazonS3Config
        {
            RegionEndpoint = RegionEndpoint.USEast1, // This can be any valid region
            ServiceURL = endpoint, // Custom endpoint for S3-compatible storage
            SignatureVersion = "2", // Use Signature Version 2
            ForcePathStyle = true, // Needed for S3-compatible services (non-AWS S3)
            UseHttp = true, // Ensure it's using HTTP or HTTPS based on endpoint
        };

        // Initialize S3 client with custom endpoint and configuration
        using (var s3Client = new AmazonS3Client(credentials, config))
        {
            try
            {
                // Create an upload request
                var transferUtility = new TransferUtility(s3Client);

                // Upload the file
                await transferUtility.UploadAsync(filePath, bucketName);
                Console.WriteLine("File uploaded successfully.");
            }
            catch (AmazonS3Exception e)
            {
                Console.WriteLine("Error occurred while uploading the file: " + e.Message);
            }
            catch (Exception e)
            {
                Console.WriteLine("An unexpected error occurred: " + e.Message);
            }
        }
    }
}

using System;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Amazon;
using Amazon.S3;
using Amazon.S3.Model;
using Amazon.Runtime;
using Amazon.S3.Transfer;

class Program
{
    static async Task Main(string[] args)
    {
        // Define the S3 service point, access keys, and other configurations
        string endpoint = "https://textA"; // S3-compatible endpoint URL
        string accessKey = "textB"; // Your Access Key
        string secretKey = "textC"; // Your Secret Key
        string bucketName = "your-bucket-name"; // The name of the bucket
        string directoryPath = "path text/"; // The directory path inside the bucket
        
        // Initialize AWS credentials and configuration
        var credentials = new BasicAWSCredentials(accessKey, secretKey);
        
        var config = new AmazonS3Config
        {
            RegionEndpoint = RegionEndpoint.USEast1, // This can be any valid region
            ServiceURL = endpoint, // Custom endpoint for S3-compatible storage
            SignatureVersion = "2", // Use Signature Version 2
            ForcePathStyle = true, // Needed for S3-compatible services (non-AWS S3)
            UseHttp = true, // Ensure it's using HTTP or HTTPS based on endpoint
        };

        // Initialize S3 client with custom endpoint and configuration
        using (var s3Client = new AmazonS3Client(credentials, config))
        {
            try
            {
                // List objects in the specified directory
                var listRequest = new ListObjectsV2Request
                {
                    BucketName = bucketName,
                    Prefix = directoryPath // Filter by the directory path (optional)
                };

                // Get list of objects
                var listResponse = await s3Client.ListObjectsV2Async(listRequest);
                if (listResponse.S3Objects.Count == 0)
                {
                    Console.WriteLine("No files found in the specified directory.");
                    return;
                }

                // Filter files uploaded today
                var today = DateTime.UtcNow.Date;
                var filesToDownload = listResponse.S3Objects
                    .Where(obj => obj.LastModified.Date == today) // Filter by today's date
                    .OrderByDescending(obj => obj.LastModified) // Sort by newest file first
                    .ToList();

                if (filesToDownload.Count == 0)
                {
                    Console.WriteLine("No files uploaded today.");
                    return;
                }

                // Download each of the newest files
                foreach (var file in filesToDownload)
                {
                    Console.WriteLine($"Downloading file: {file.Key} (Uploaded: {file.LastModified})");

                    var downloadRequest = new GetObjectRequest
                    {
                        BucketName = bucketName,
                        Key = file.Key
                    };

                    var downloadResponse = await s3Client.GetObjectAsync(downloadRequest);
                    string downloadPath = Path.Combine(Directory.GetCurrentDirectory(), file.Key);

                    // Ensure the directory exists before downloading
                    var directory = Path.GetDirectoryName(downloadPath);
                    if (!Directory.Exists(directory))
                    {
                        Directory.CreateDirectory(directory);
                    }

                    // Download the file to the local machine
                    await downloadResponse.WriteResponseStreamToFileAsync(downloadPath, false, default);

                    Console.WriteLine($"File downloaded successfully: {downloadPath}");
                }
            }
            catch (AmazonS3Exception e)
            {
                Console.WriteLine("Error occurred while accessing the S3 bucket: " + e.Message);
            }
            catch (Exception e)
            {
                Console.WriteLine("An unexpected error occurred: " + e.Message);
            }


           }
            finally
            {
                // Explicitly dispose of the S3 client to ensure the connection is closed
                Console.WriteLine("Closing connection...");
                // The `using` block already calls Dispose, but we are doing it explicitly here as well
        }
    }
}



using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Amazon;
using Amazon.S3;
using Amazon.S3.Model;
using Amazon.Runtime;
using Amazon.S3.Transfer;

class Program
{
    static async Task Main(string[] args)
    {
        // Define the S3 service point, access keys, and other configurations
        string endpoint = "https://textA"; // S3-compatible endpoint URL
        string accessKey = "textB"; // Your Access Key
        string secretKey = "textC"; // Your Secret Key
        string bucketName = "your-bucket-name"; // The name of the bucket
        string directoryPath = "path text/"; // The directory path inside the bucket
        
        // Initialize AWS credentials and configuration
        var credentials = new BasicAWSCredentials(accessKey, secretKey);
        
        var config = new AmazonS3Config
        {
            RegionEndpoint = RegionEndpoint.USEast1, // This can be any valid region
            ServiceURL = endpoint, // Custom endpoint for S3-compatible storage
            SignatureVersion = "2", // Use Signature Version 2
            ForcePathStyle = true, // Needed for S3-compatible services (non-AWS S3)
            UseHttp = true, // Ensure it's using HTTP or HTTPS based on endpoint
        };

        // Initialize S3 client with custom endpoint and configuration
        using (var s3Client = new AmazonS3Client(credentials, config))
        {
            try
            {
                // List objects in the specified directory
                var listRequest = new ListObjectsV2Request
                {
                    BucketName = bucketName,
                    Prefix = directoryPath // Filter by the directory path (optional)
                };

                // Get list of objects
                var listResponse = await s3Client.ListObjectsV2Async(listRequest);
                if (listResponse.S3Objects.Count == 0)
                {
                    Console.WriteLine("No files found in the specified directory.");
                    return;
                }

                // Filter files uploaded today
                var today = DateTime.UtcNow.Date;
                var filesToDownload = listResponse.S3Objects
                    .Where(obj => obj.LastModified.Date == today) // Filter by today's date
                    .OrderByDescending(obj => obj.LastModified) // Sort by newest file first
                    .ToList();

                if (filesToDownload.Count == 0)
                {
                    Console.WriteLine("No files uploaded today.");
                    return;
                }

                // Download each of the newest files
                foreach (var file in filesToDownload)
                {
                    Console.WriteLine($"Downloading file: {file.Key} (Uploaded: {file.LastModified})");

                    var downloadRequest = new GetObjectRequest
                    {
                        BucketName = bucketName,
                        Key = file.Key
                    };

                    var downloadResponse = await s3Client.GetObjectAsync(downloadRequest);
                    string downloadPath = Path.Combine(Directory.GetCurrentDirectory(), file.Key);

                    // Ensure the directory exists before downloading
                    var directory = Path.GetDirectoryName(downloadPath);
                    if (!Directory.Exists(directory))
                    {
                        Directory.CreateDirectory(directory);
                    }

                    // Download the file to the local machine
                    await downloadResponse.WriteResponseStreamToFileAsync(downloadPath, false, default);

                    Console.WriteLine($"File downloaded successfully: {downloadPath}");

                    // Now, let's process the file and dump data into a 2D dictionary
                    var data = await ParseFileToDictionary(downloadResponse.ResponseStream);

                    // Output the 2D dictionary (for testing)
                    Console.WriteLine("Data Dump:");
                    foreach (var row in data)
                    {
                        Console.WriteLine($"Row {row.Key}:");
                        foreach (var field in row.Value)
                        {
                            Console.WriteLine($"  {field.Key}: {field.Value}");
                        }
                    }
                }
            }
            catch (AmazonS3Exception e)
            {
                Console.WriteLine("Error occurred while accessing the S3 bucket: " + e.Message);
            }
            catch (Exception e)
            {
                Console.WriteLine("An unexpected error occurred: " + e.Message);
            }
            finally
            {
                // Explicitly dispose of the S3 client to ensure the connection is closed
                Console.WriteLine("Closing connection...");
            }
        }
    }

    // Method to parse the file into a 2D dictionary
    private static async Task<Dictionary<int, Dictionary<string, string>>> ParseFileToDictionary(Stream fileStream)
    {
        var data = new Dictionary<int, Dictionary<string, string>>();

        using (var reader = new StreamReader(fileStream))
        {
            // Read all lines from the file
            var lines = new List<string>();
            while (!reader.EndOfStream)
            {
                lines.Add(await reader.ReadLineAsync());
            }

            if (lines.Count == 0)
                return data;

            // Parse the first row to get the field names (column headers)
            var fields = lines[0].Split('|').Select(f => f.Trim()).ToArray();

            // Process each row (excluding the header row)
            for (int i = 1; i < lines.Count; i++)
            {
                var rowValues = lines[i].Split('|').Select(f => f.Trim()).ToArray();
                var rowDict = new Dictionary<string, string>();

                // Assign values to the dictionary based on the fields
                for (int j = 0; j < fields.Length; j++)
                {
                    if (j < rowValues.Length) // Avoid index out of range
                    {
                        rowDict[fields[j]] = rowValues[j];
                    }
                }

                // Add the row to the 2D dictionary
                data[i] = rowDict;
            }
        }

        return data;
    }
}

using System;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Threading.Tasks;
using Amazon;
using Amazon.S3;
using Amazon.S3.Model;
using Amazon.Runtime;
using Amazon.S3.Transfer;
using System.Collections.Generic;
using System.IO;

class Program
{
    static async Task Main(string[] args)
    {
        // Define the S3 service point, access keys, and other configurations
        string endpoint = "https://textA"; // S3-compatible endpoint URL
        string accessKey = "textB"; // Your Access Key
        string secretKey = "textC"; // Your Secret Key
        string bucketName = "your-bucket-name"; // The name of the bucket
        string directoryPath = "path text/"; // The directory path inside the bucket

        // SQL Server connection string (Windows Authentication)
        string connectionString = "Server=your_sql_server;Database=your_database;Integrated Security=True;";

        // Initialize AWS credentials and configuration
        var credentials = new BasicAWSCredentials(accessKey, secretKey);
        
        var config = new AmazonS3Config
        {
            RegionEndpoint = RegionEndpoint.USEast1, // This can be any valid region
            ServiceURL = endpoint, // Custom endpoint for S3-compatible storage
            SignatureVersion = "2", // Use Signature Version 2
            ForcePathStyle = true, // Needed for S3-compatible services (non-AWS S3)
            UseHttp = true, // Ensure it's using HTTP or HTTPS based on endpoint
        };

        // Initialize S3 client with custom endpoint and configuration
        using (var s3Client = new AmazonS3Client(credentials, config))
        {
            try
            {
                // List objects in the specified directory
                var listRequest = new ListObjectsV2Request
                {
                    BucketName = bucketName,
                    Prefix = directoryPath // Filter by the directory path (optional)
                };

                // Get list of objects
                var listResponse = await s3Client.ListObjectsV2Async(listRequest);
                if (listResponse.S3Objects.Count == 0)
                {
                    Console.WriteLine("No files found in the specified directory.");
                    return;
                }

                // Filter files uploaded today
                var today = DateTime.UtcNow.Date;
                var filesToDownload = listResponse.S3Objects
                    .Where(obj => obj.LastModified.Date == today) // Filter by today's date
                    .OrderByDescending(obj => obj.LastModified) // Sort by newest file first
                    .ToList();

                if (filesToDownload.Count == 0)
                {
                    Console.WriteLine("No files uploaded today.");
                    return;
                }

                // Download each of the newest files
                foreach (var file in filesToDownload)
                {
                    Console.WriteLine($"Downloading file: {file.Key} (Uploaded: {file.LastModified})");

                    var downloadRequest = new GetObjectRequest
                    {
                        BucketName = bucketName,
                        Key = file.Key
                    };

                    var downloadResponse = await s3Client.GetObjectAsync(downloadRequest);
                    string downloadPath = Path.Combine(Directory.GetCurrentDirectory(), file.Key);

                    // Ensure the directory exists before downloading
                    var directory = Path.GetDirectoryName(downloadPath);
                    if (!Directory.Exists(directory))
                    {
                        Directory.CreateDirectory(directory);
                    }

                    // Download the file to the local machine
                    await downloadResponse.WriteResponseStreamToFileAsync(downloadPath, false, default);

                    Console.WriteLine($"File downloaded successfully: {downloadPath}");

                    // Now, let's process the file and dump data into a 2D dictionary
                    var data = await ParseFileToDictionary(downloadResponse.ResponseStream);

                    // Insert data into SQL Server
                    await InsertDataToSqlServer(data, connectionString);
                }
            }
            catch (AmazonS3Exception e)
            {
                Console.WriteLine("Error occurred while accessing the S3 bucket: " + e.Message);
            }
            catch (Exception e)
            {
                Console.WriteLine("An unexpected error occurred: " + e.Message);
            }
            finally
            {
                // Explicitly dispose of the S3 client to ensure the connection is closed
                Console.WriteLine("Closing connection...");
            }
        }
    }

    // Method to parse the file into a 2D dictionary
    private static async Task<Dictionary<int, Dictionary<string, string>>> ParseFileToDictionary(Stream fileStream)
    {
        var data = new Dictionary<int, Dictionary<string, string>>();

        using (var reader = new StreamReader(fileStream))
        {
            // Read all lines from the file
            var lines = new List<string>();
            while (!reader.EndOfStream)
            {
                lines.Add(await reader.ReadLineAsync());
            }

            if (lines.Count == 0)
                return data;

            // Parse the first row to get the field names (column headers)
            var fields = lines[0].Split('|').Select(f => f.Trim()).ToArray();

            // Process each row (excluding the header row)
            for (int i = 1; i < lines.Count; i++)
            {
                var rowValues = lines[i].Split('|').Select(f => f.Trim()).ToArray();
                var rowDict = new Dictionary<string, string>();

                // Assign values to the dictionary based on the fields
                for (int j = 0; j < fields.Length; j++)
                {
                    if (j < rowValues.Length) // Avoid index out of range
                    {
                        rowDict[fields[j]] = rowValues[j];
                    }
                }

                // Add the row to the 2D dictionary
                data[i] = rowDict;
            }
        }

        return data;
    }

    // Method to insert data into SQL Server
    private static async Task InsertDataToSqlServer(Dictionary<int, Dictionary<string, string>> data, string connectionString)
    {
        using (var connection = new SqlConnection(connectionString))
        {
            await connection.OpenAsync();

            foreach (var row in data)
            {
                // Create an INSERT SQL query dynamically based on the row data
                var fields = string.Join(", ", row.Value.Keys);
                var values = string.Join(", ", row.Value.Values.Select(v => $"'{v}'"));

                var query = $"INSERT INTO Person ({fields}) VALUES ({values})";

                using (var command = new SqlCommand(query, connection))
                {
                    await command.ExecuteNonQueryAsync();
                    Console.WriteLine($"Inserted row {row.Key} into database.");
                }
            }
        }
    }
}


using System.Data.SqlClient;

// Assume you have a dictionary row.Value with keys and values
var fields = string.Join(", ", row.Value.Keys);
var parameterNames = string.Join(", ", row.Value.Keys.Select(k => $"@{k}"));
var query = $"INSERT INTO Person ({fields}) VALUES ({parameterNames})";

using (var connection = new SqlConnection("YourConnectionString"))
{
    using (var command = new SqlCommand(query, connection))
    {
        // Add parameters to the command
        foreach (var kvp in row.Value)
        {
            command.Parameters.AddWithValue($"@{kvp.Key}", kvp.Value ?? DBNull.Value);
        }

        connection.Open();
        command.ExecuteNonQuery();
    }
}



